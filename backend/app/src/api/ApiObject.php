<?php

namespace Zooma\SilverStripe\Models;

use LogicException;
use Ramsey\Uuid\Uuid;
use SilverStripe\ORM\DataList;
use SilverStripe\ORM\DataObject;
use SilverStripe\ORM\ValidationException;
use SilverStripe\ORM\ValidationResult;
use SilverStripe\View\ViewableData;

/**
 * Class ApiObject
 * @package Zooma\SilverStripe\Models
 *
 * Looks, sounds and quacks like a dataobject, but doesnt involve a database.
 * Can be used make custom logic the the ApiController
 */
abstract class ApiObject extends ViewableData {
    private $isExecuted = false;

    static $idToApiObjectMap = [
    ];

    public function __construct() {
        parent::__construct();
        $this->ID = count(self::$idToApiObjectMap) + 1;
        $this->Uuid = Uuid::uuid4()->toString();
        self::$idToApiObjectMap[] = $this;
    }

    public static function get_by_id($classOrID, $idOrCache = null, $cache = true) {
        if (count(self::$idToApiObjectMap) < intval($classOrID)) {
            return null;
        }
        return self::$idToApiObjectMap[intval($classOrID) - 1];
    }

    protected function onBeforeWrite() {
        $this->brokenOnWrite = false;
    }

    protected function onAfterWrite() {

    }

    public function write($showDebug = false, $forceInsert = false, $forceWrite = false, $writeComponents = false) {
        if ($this->isExecuted) {
            return;
        }
        $this->isExecuted = true;
        // Execute pre-write tasks
        $this->preWrite();
        if ($this->DataList) {
            $this->executeToDataList($this->DataList);
        } else if ($this->DataObject) {
            $this->executeToDataObject($this->DataObject);
        } else {
            $this->execute();
        }
    }

    private function executeToDataList(DataList $dataList) {
        $this->execute();
    }

    private function executeToDataObject(DataObject $dataObject) {
        $this->execute();
    }

    abstract function execute();

    /**
     * Used by onBeforeWrite() to ensure child classes call parent::onBeforeWrite()
     * @var boolean
     */
    protected $brokenOnWrite = false;

    /**
     * Prepare an object prior to write
     *
     * @throws ValidationException
     */
    protected function preWrite() {
        // Validate this object
        if ($writeException = $this->validateWrite()) {
            // Used by DODs to clean up after themselves, eg, Versioned
            $this->invokeWithExtensions('onAfterSkippedWrite');
            throw $writeException;
        }
        // Check onBeforeWrite
        $this->brokenOnWrite = true;
        $this->onBeforeWrite();
        if ($this->brokenOnWrite) {
            throw new LogicException(
                static::class . " has a broken onBeforeWrite() function."
                . " Make sure that you call parent::onBeforeWrite()."
            );
        }
    }

    /**
     * Determine validation of this object prior to write
     *
     * @return ValidationException Exception generated by this write, or null if valid
     */
    protected function validateWrite() {
        // Note: Validation can only be disabled at the global level, not per-model
        if (DataObject::config()->uninherited('validation_enabled')) {
            $result = $this->validate();
            if (!$result->isValid()) {
                return new ValidationException($result);
            }
        }
        return null;
    }

    /**
     * Validate the current object.
     *
     * By default, there is no validation - objects are always valid!  However, you can overload this method in your
     * DataObject sub-classes to specify custom validation, or use the hook through DataExtension.
     *
     * Invalid objects won't be able to be written - a warning will be thrown and no write will occur.  onBeforeWrite()
     * and onAfterWrite() won't get called either.
     *
     * It is expected that you call validate() in your own application to test that an object is valid before
     * attempting a write, and respond appropriately if it isn't.
     *
     * @return ValidationResult
     * @see {@link ValidationResult}
     */
    public function validate() {
        $result = ValidationResult::create();
        $this->extend('validate', $result);
        return $result;
    }

    public function populateDefaults() {

    }

    public function canCreate($member = null, $context = []) {
        return false;
    }

    public function canEdit($member = null) {
        return false;
    }

    public function canView($member = null) {
        return false;
    }
}
